//
//  PhotoWallInteractor.swift
//  FlickrSearcher
//
//  Created by CHI on 2020/1/26.
//  Copyright (c) 2020 CHI. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

protocol SearchResultBusinessLogic {
    func loadPhotos(request: SearchResult.LoadPhotos.Request)
    
    func collectPhoto(request: SearchResult.CollectPhoto.Request)
    
    func uncollectPhoto(request: SearchResult.UncollectPhoto.Request)
}

protocol SearchResultDataStore {
    var keyword: String { get set }
    var countPerPage: Int { get set }
}

class SearchResultInteractor: SearchResultBusinessLogic, SearchResultDataStore {
    var presenter: SearchResultPresentationLogic?
    var flickrAPIWorker = FlickrAPIWorker()
    var localPhotoWorker = LocalPhotoWorker.shared

    var keyword: String
    var countPerPage: Int
    var currentPage = 0
    
    init(keyword: String, countPerPage: Int) {
        self.keyword = keyword
        self.countPerPage = countPerPage
    }
    
    func loadPhotos(request: SearchResult.LoadPhotos.Request) {
        currentPage += 1
        
        var response = SearchResult.LoadPhotos.Response()
        flickrAPIWorker.search(with: keyword, perpageCount: countPerPage, page: currentPage) { [weak self] (result) in
            switch result {
            case .success(let responseData):
                guard let parsedDic = responseData as? [String: Any],
                let page = parsedDic["page"] as? Int,
                let pages = parsedDic["pages"] as? Int,
                let photos = parsedDic["photos"] as? [JSON],
                self?.currentPage == page else {
                    // to do: error handling
                    return
                }
                response.photos = photos
                response.isLoadingAll = (self?.currentPage == pages)
                    
                self?.presenter?.presentLoadPhotos(response: response)
                
            case .failure(let error):
                break
            }
        }
    }
    
    func collectPhoto(request: SearchResult.CollectPhoto.Request) {
        localPhotoWorker.newLocalPhoto(flickrId: request.id, title: request.title, imageData: request.imageData)
        
        let response = SearchResult.CollectPhoto.Response()
        presenter?.presentCollectPhot(reponse: response)
    }
    
    func uncollectPhoto(request: SearchResult.UncollectPhoto.Request) {
        localPhotoWorker.deleteLocalPhoto(flickrID: request.flickrId)
        
        let response = SearchResult.UncollectPhoto.Response()
        presenter?.presentUncollectPhot(reponse: response)
    }
}
