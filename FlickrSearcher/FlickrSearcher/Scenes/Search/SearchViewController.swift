//
//  SearchViewController.swift
//  FlickrSearcher
//
//  Created by CHI on 2020/1/25.
//  Copyright (c) 2020 CHI. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class {
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    // MARK: User interface elements
    lazy var keyWordTextField: UITextField = {
        let textField = UITextField(frame: .zero)
        textField.translatesAutoresizingMaskIntoConstraints = false
        textField.delegate = self
        textField.backgroundColor = UIColor.systemGray.withAlphaComponent(0.15)
        textField.layer.cornerRadius = 3
        textField.textAlignment = .center
        textField.placeholder = "欲搜尋關鍵字"
        return textField
    }()
    
    lazy var countPerPageTextField: UITextField = {
        let textField = UITextField(frame: .zero)
        textField.translatesAutoresizingMaskIntoConstraints = false
        textField.delegate = self
        textField.backgroundColor = UIColor.systemGray.withAlphaComponent(0.15)
        textField.layer.cornerRadius = 3
        textField.textAlignment = .center
        textField.placeholder = "每頁呈現數量"
        textField.keyboardType = .numberPad
        return textField
    }()
    
    @objc lazy var searchButton: UIButton = {
        let button = UIButton(frame: .zero)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle("搜尋", for: .normal)
        button.addTarget(self, action: #selector(searchButtonDidTapped), for: .touchUpInside)
        button.backgroundColor = .systemGray
        button.isEnabled = false
        return button
    }()

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    deinit {
        removeObserver(self, forKeyPath: #keyPath(searchButton.isEnabled), context: nil)
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpAndLayoutViews()
    }
    
    private func setUpAndLayoutViews() {
        title = "輸入搜尋"
        view.backgroundColor = .systemBackground
        
        let stackView = UIStackView(frame: .zero)
        stackView.translatesAutoresizingMaskIntoConstraints = false
        stackView.alignment = .fill
        stackView.axis = .vertical
        stackView.distribution = .equalSpacing
        
        view.addSubview(stackView)
        stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        stackView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.7).isActive = true
        stackView.heightAnchor.constraint(equalTo: stackView.widthAnchor, multiplier: 0.9).isActive = true
        
        stackView.addArrangedSubview(keyWordTextField)
        keyWordTextField.heightAnchor.constraint(equalTo: keyWordTextField.widthAnchor, multiplier: 0.16).isActive = true
        stackView.addArrangedSubview(countPerPageTextField)
        countPerPageTextField.heightAnchor.constraint(equalTo: countPerPageTextField.widthAnchor, multiplier: 0.16).isActive = true
        stackView.addArrangedSubview(searchButton)
        searchButton.heightAnchor.constraint(equalTo: searchButton.widthAnchor ,multiplier: 0.2).isActive = true
        addObserver(self, forKeyPath: #keyPath(searchButton.isEnabled), options: [.new], context: nil)
    }
    
    // MARK: User interaction action
    @objc func searchButtonDidTapped() {
        guard let keyword = keyWordTextField.text, let countString = countPerPageTextField.text, let countPerPage = Int(countString) else {
            return
        }
        router?.routeToPhotoWall(keyword: keyword, countPerPage: countPerPage)
    }
}

// MARK: UITextFieldDelegate
extension SearchViewController: UITextFieldDelegate {
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        view.endEditing(true)
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        searchButton.isEnabled = false
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case keyWordTextField:
            countPerPageTextField.becomeFirstResponder()
        default:
            textField.resignFirstResponder()
        }
        return true
    }
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        if (keyWordTextField.text?.isEmpty ?? true) || (countPerPageTextField.text?.isEmpty ?? true) {
            searchButton.isEnabled = false
        } else {
            searchButton.isEnabled = true
        }
    }
}

// MARK: Keypath observation
extension SearchViewController {
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        switch keyPath {
        case #keyPath(searchButton.isEnabled):
            searchButton.backgroundColor = searchButton.isEnabled ? .systemBlue : .systemGray
        default:
            break
        }
    }
}
