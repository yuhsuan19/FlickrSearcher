//
//  FavoriteViewController.swift
//  FlickrSearcher
//
//  Created by CHI on 2020/2/3.
//  Copyright (c) 2020 CHI. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoriteDisplayLogic: class {
    func displayFetchLocalPhotos(viewModel: Favorite.FetchLocalPhoto.ViewModel)
    
    func displayUncollectPhoto(viewModel: Favorite.UncollectPhoto.ViewModel)
}

class FavoriteViewController: UIViewController, FavoriteDisplayLogic {
    var interactor: FavoriteBusinessLogic?
    var router: (NSObjectProtocol & FavoriteRoutingLogic & FavoriteDataPassing)?

    // MARK: User interface elements
    lazy var collectionView: FavoriteCollectioView = {
        let collectionView = FavoriteCollectioView()
        collectionView.localPhotoDelegate = self
        return collectionView
    }()

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = FavoriteInteractor()
        let presenter = FavoritePresenter()
        let router = FavoriteRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpAndLayoutViews()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let request = Favorite.FetchLocalPhoto.Request()
        interactor?.fetechLocalPhotos(request: request)
    }
    
    private func setUpAndLayoutViews() {
        title = "我的最愛"
        view.backgroundColor = .systemBackground
        
        view.addSubview(collectionView)
        collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = true
        collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor).isActive = true
    }
    
    // MARK: Display logic
    func displayFetchLocalPhotos(viewModel: Favorite.FetchLocalPhoto.ViewModel) {
        collectionView.photos = viewModel.localPhotos
        collectionView.reloadData()
    }
    
    func displayUncollectPhoto(viewModel: Favorite.UncollectPhoto.ViewModel) {
        let request = Favorite.FetchLocalPhoto.Request()
        interactor?.fetechLocalPhotos(request: request)
    }
}

extension FavoriteViewController: FavoriteCollectioViewDelegate {
    func deleteFavoritePhoto(with flickrId: String) {
        let alert = UIAlertController(title: "確定移除最愛？", message: nil, preferredStyle: .alert)
        let deleteAction = UIAlertAction(title: "移除", style: .destructive) { [weak self] (_) in
            let request = Favorite.UncollectPhoto.Request(flickrId: flickrId)
            self?.interactor?.uncollectPhoto(request: request)
        }
        let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
        
        alert.addAction(deleteAction)
        alert.addAction(cancelAction)
        
        present(alert, animated: true, completion: nil)
    }
}
